/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package oepc.provider;

import java.util.ArrayList;
import java.util.Collection;

import oepc.util.OepcAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OepcItemProviderAdapterFactory extends OepcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OepcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.OEPC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OEPCItemProvider oepcItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.OEPC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOEPCAdapter() {
		if (oepcItemProvider == null) {
			oepcItemProvider = new OEPCItemProvider(this);
		}

		return oepcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.BusinessObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessObjectItemProvider businessObjectItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.BusinessObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessObjectAdapter() {
		if (businessObjectItemProvider == null) {
			businessObjectItemProvider = new BusinessObjectItemProvider(this);
		}

		return businessObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.ITSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ITSystemItemProvider itSystemItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.ITSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createITSystemAdapter() {
		if (itSystemItemProvider == null) {
			itSystemItemProvider = new ITSystemItemProvider(this);
		}

		return itSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.OrganisationUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganisationUnitItemProvider organisationUnitItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.OrganisationUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganisationUnitAdapter() {
		if (organisationUnitItemProvider == null) {
			organisationUnitItemProvider = new OrganisationUnitItemProvider(this);
		}

		return organisationUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.XORConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XORConnectorItemProvider xorConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.XORConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXORConnectorAdapter() {
		if (xorConnectorItemProvider == null) {
			xorConnectorItemProvider = new XORConnectorItemProvider(this);
		}

		return xorConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.ANDConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDConnectorItemProvider andConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.ANDConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDConnectorAdapter() {
		if (andConnectorItemProvider == null) {
			andConnectorItemProvider = new ANDConnectorItemProvider(this);
		}

		return andConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.ORConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORConnectorItemProvider orConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.ORConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORConnectorAdapter() {
		if (orConnectorItemProvider == null) {
			orConnectorItemProvider = new ORConnectorItemProvider(this);
		}

		return orConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.ControlFlowEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowEdgeItemProvider controlFlowEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.ControlFlowEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowEdgeAdapter() {
		if (controlFlowEdgeItemProvider == null) {
			controlFlowEdgeItemProvider = new ControlFlowEdgeItemProvider(this);
		}

		return controlFlowEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.InformationEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationEdgeItemProvider informationEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.InformationEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationEdgeAdapter() {
		if (informationEdgeItemProvider == null) {
			informationEdgeItemProvider = new InformationEdgeItemProvider(this);
		}

		return informationEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.BusinessAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessAttributeItemProvider businessAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.BusinessAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessAttributeAdapter() {
		if (businessAttributeItemProvider == null) {
			businessAttributeItemProvider = new BusinessAttributeItemProvider(this);
		}

		return businessAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.BusinessMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessMethodItemProvider businessMethodItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.BusinessMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessMethodAdapter() {
		if (businessMethodItemProvider == null) {
			businessMethodItemProvider = new BusinessMethodItemProvider(this);
		}

		return businessMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link oepc.Document} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentItemProvider documentItemProvider;

	/**
	 * This creates an adapter for a {@link oepc.Document}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentAdapter() {
		if (documentItemProvider == null) {
			documentItemProvider = new DocumentItemProvider(this);
		}

		return documentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (oepcItemProvider != null) oepcItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (businessObjectItemProvider != null) businessObjectItemProvider.dispose();
		if (itSystemItemProvider != null) itSystemItemProvider.dispose();
		if (organisationUnitItemProvider != null) organisationUnitItemProvider.dispose();
		if (xorConnectorItemProvider != null) xorConnectorItemProvider.dispose();
		if (andConnectorItemProvider != null) andConnectorItemProvider.dispose();
		if (orConnectorItemProvider != null) orConnectorItemProvider.dispose();
		if (controlFlowEdgeItemProvider != null) controlFlowEdgeItemProvider.dispose();
		if (informationEdgeItemProvider != null) informationEdgeItemProvider.dispose();
		if (businessAttributeItemProvider != null) businessAttributeItemProvider.dispose();
		if (businessMethodItemProvider != null) businessMethodItemProvider.dispose();
		if (documentItemProvider != null) documentItemProvider.dispose();
	}

}
